# This is an example .goreleaser.yml file with some sane defaults.
# Make sure to check the documentation at http://goreleaser.com
project_name: ftw
before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod download
builds:
  - id: "ftw"
    env:
      - GO111MODULE=on
      - CGO_ENABLED=0
    binary: ftw
    goos:
      - linux
      - darwin
    goarch:
      - amd64
archives:
  - name_template: "{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}"
    replacements:
      darwin: Darwin
      linux: Linux
      windows: Windows
      386: i386
      amd64: x86_64
checksum:
  name_template: '{{ .ProjectName }}-checksums.txt'
snapshot:
  name_template: "{{ .Tag }}-next"
changelog:
  sort: asc
  use: github
  groups:
    - title: Features
      regexp: "^.*feat[(\\w)]*:+.*$"
      order: 0
    - title: 'Bug fixes'
      regexp: "^.*fix[(\\w)]*:+.*$"
      order: 1
    - title: Others
      order: 999
  filters:
    exclude:
      - '^docs'
      - '^test'
release:
  prerelease: auto

nfpms:
  - id: "ftw"
    builds: ["ftw"]
    formats:
      - deb
      - rpm
    bindir: /usr/bin
    overrides:
      rpm:
        replacements:
          amd64: x86_64
        file_name_template: "{{ .ProjectName }}-{{ .Version }}.{{ .Arch }}"
      deb:
        file_name_template: "{{ .ProjectName }}-{{ .Version }}_{{ .Arch }}"
    vendor:
    homepage: https://github.com/coreruleset/go-ftw
    maintainer: felipe.zipitria@owasp.org
    description:
      Framework for Testing WAFs - Go version

      It uses the OWASP Core Ruleset V3 as a baseline to test rules on a WAF. Each rule from the ruleset is loaded into a YAML file that issues HTTP requests that will trigger these rules. Users can verify the execution of the rule after the tests are issued to make sure the expected response is received from an attack
    license: APL2


